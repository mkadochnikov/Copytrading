#!/usr/bin/env python3
"""
Dashboard –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫
–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ñ–æ–Ω–æ–≤—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
"""

import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import os
import time
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Binance Trade Copier Dashboard",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

class DatabaseReader:
    """–ö–ª–∞—Å—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path: str = "data/trading.db"):
        self.db_path = db_path
    
    def get_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if not os.path.exists(self.db_path):
            st.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω.")
            return None
        return sqlite3.connect(self.db_path)
    
    def get_trades(self, limit: int = 100) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫"""
        conn = self.get_connection()
        if conn is None:
            return pd.DataFrame()
        
        query = """
            SELECT * FROM trades 
            ORDER BY created_at DESC 
            LIMIT ?
        """
        df = pd.read_sql_query(query, conn, params=(limit,))
        conn.close()
        
        if not df.empty:
            df['created_at'] = pd.to_datetime(df['created_at'])
            df['timestamp'] = pd.to_datetime(df['timestamp'])
        
        return df
    
    def get_positions(self, account_type: str = None) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π"""
        conn = self.get_connection()
        if conn is None:
            return pd.DataFrame()
        
        if account_type:
            query = "SELECT * FROM positions WHERE account_type = ?"
            df = pd.read_sql_query(query, conn, params=(account_type,))
        else:
            query = "SELECT * FROM positions"
            df = pd.read_sql_query(query, conn)
        
        conn.close()
        
        if not df.empty:
            df['updated_at'] = pd.to_datetime(df['updated_at'])
        
        return df
    
    def get_statistics(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        conn = self.get_connection()
        if conn is None:
            return pd.DataFrame()
        
        query = "SELECT * FROM statistics ORDER BY date DESC"
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        if not df.empty:
            df['date'] = pd.to_datetime(df['date'])
            df['updated_at'] = pd.to_datetime(df['updated_at'])
        
        return df
    
    def get_trade_summary(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–∞—Ö"""
        conn = self.get_connection()
        if conn is None:
            return {}
        
        cursor = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
        cursor.execute("SELECT COUNT(*) FROM trades")
        total_trades = cursor.fetchone()[0]
        
        # –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        cursor.execute("SELECT COUNT(*) FROM trades WHERE status = 'success'")
        successful_trades = cursor.fetchone()[0]
        
        # –ù–µ—É–¥–∞—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        cursor.execute("SELECT COUNT(*) FROM trades WHERE status = 'failed'")
        failed_trades = cursor.fetchone()[0]
        
        # –°–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        cursor.execute("""
            SELECT COUNT(*) FROM trades 
            WHERE created_at >= datetime('now', '-1 day')
        """)
        trades_24h = cursor.fetchone()[0]
        
        # –û–±—â–∏–π –æ–±—ä–µ–º
        cursor.execute("SELECT SUM(quantity * price) FROM trades WHERE status = 'success'")
        total_volume = cursor.fetchone()[0] or 0
        
        conn.close()
        
        return {
            'total_trades': total_trades,
            'successful_trades': successful_trades,
            'failed_trades': failed_trades,
            'trades_24h': trades_24h,
            'total_volume': total_volume,
            'success_rate': (successful_trades / total_trades * 100) if total_trades > 0 else 0
        }

def create_trades_chart(df: pd.DataFrame):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–¥–µ–ª–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    if df.empty:
        return None
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ —á–∞—Å–∞–º
    df_hourly = df.set_index('created_at').resample('H').size().reset_index()
    df_hourly.columns = ['hour', 'count']
    
    fig = px.line(
        df_hourly, 
        x='hour', 
        y='count',
        title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏',
        labels={'hour': '–í—Ä–µ–º—è', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫'}
    )
    
    fig.update_layout(
        xaxis_title="–í—Ä–µ–º—è",
        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫",
        hovermode='x unified'
    )
    
    return fig

def create_positions_comparison_chart(real_positions: pd.DataFrame, test_positions: pd.DataFrame):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"""
    if real_positions.empty and test_positions.empty:
        return None
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    real_symbols = set(real_positions['symbol'].tolist()) if not real_positions.empty else set()
    test_symbols = set(test_positions['symbol'].tolist()) if not test_positions.empty else set()
    all_symbols = real_symbols.union(test_symbols)
    
    comparison_data = []
    for symbol in all_symbols:
        real_size = 0
        test_size = 0
        
        if not real_positions.empty:
            real_pos = real_positions[real_positions['symbol'] == symbol]
            if not real_pos.empty:
                real_size = real_pos.iloc[0]['size']
        
        if not test_positions.empty:
            test_pos = test_positions[test_positions['symbol'] == symbol]
            if not test_pos.empty:
                test_size = test_pos.iloc[0]['size']
        
        comparison_data.append({
            'symbol': symbol,
            'real_size': real_size,
            'test_size': test_size,
            'difference': abs(real_size - test_size)
        })
    
    df_comparison = pd.DataFrame(comparison_data)
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        name='–†–µ–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç',
        x=df_comparison['symbol'],
        y=df_comparison['real_size'],
        marker_color='blue'
    ))
    
    fig.add_trace(go.Bar(
        name='–¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç',
        x=df_comparison['symbol'],
        y=df_comparison['test_size'],
        marker_color='orange'
    ))
    
    fig.update_layout(
        title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–π',
        xaxis_title='–°–∏–º–≤–æ–ª',
        yaxis_title='–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏',
        barmode='group'
    )
    
    return fig

def create_pnl_chart(positions: pd.DataFrame):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ PnL"""
    if positions.empty:
        return None
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å PnL
    positions_with_pnl = positions[positions['pnl'] != 0].copy()
    
    if positions_with_pnl.empty:
        return None
    
    fig = px.bar(
        positions_with_pnl,
        x='symbol',
        y='pnl',
        color='pnl',
        color_continuous_scale=['red', 'yellow', 'green'],
        title='PnL –ø–æ –ø–æ–∑–∏—Ü–∏—è–º',
        labels={'symbol': '–°–∏–º–≤–æ–ª', 'pnl': 'PnL (USDT)'}
    )
    
    fig.update_layout(
        xaxis_title="–°–∏–º–≤–æ–ª",
        yaxis_title="PnL (USDT)",
        showlegend=False
    )
    
    return fig

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è dashboard"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üìä Binance Trade Copier Dashboard")
    st.markdown("---")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = DatabaseReader()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    auto_refresh = st.sidebar.checkbox("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (30 —Å–µ–∫)", value=True)
    if auto_refresh:
        time.sleep(30)
        st.rerun()
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    trades_limit = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫", 10, 500, 100)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    trades_df = db.get_trades(trades_limit)
    real_positions_df = db.get_positions('real')
    test_positions_df = db.get_positions('testnet')
    summary = db.get_trade_summary()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists("data/trading.db"):
        st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω: `python src/background_service.py`")
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.header("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫",
            value=summary.get('total_trades', 0)
        )
    
    with col2:
        st.metric(
            label="–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫",
            value=summary.get('successful_trades', 0),
            delta=f"{summary.get('success_rate', 0):.1f}% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å"
        )
    
    with col3:
        st.metric(
            label="–ó–∞ 24 —á–∞—Å–∞",
            value=summary.get('trades_24h', 0)
        )
    
    with col4:
        st.metric(
            label="–û–±—â–∏–π –æ–±—ä–µ–º",
            value=f"${summary.get('total_volume', 0):,.2f}"
        )
    
    st.markdown("---")
    
    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs(["üìã –°–¥–µ–ª–∫–∏", "üìä –ü–æ–∑–∏—Ü–∏–∏", "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "‚öôÔ∏è –°—Ç–∞—Ç—É—Å"])
    
    with tab1:
        st.header("üìã –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
        
        if not trades_df.empty:
            # –§–∏–ª—å—Ç—Ä—ã
            col1, col2, col3 = st.columns(3)
            
            with col1:
                status_filter = st.selectbox(
                    "–°—Ç–∞—Ç—É—Å", 
                    ['–í—Å–µ'] + list(trades_df['status'].unique())
                )
            
            with col2:
                symbol_filter = st.selectbox(
                    "–°–∏–º–≤–æ–ª",
                    ['–í—Å–µ'] + list(trades_df['symbol'].unique())
                )
            
            with col3:
                side_filter = st.selectbox(
                    "–°—Ç–æ—Ä–æ–Ω–∞",
                    ['–í—Å–µ'] + list(trades_df['side'].unique())
                )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_df = trades_df.copy()
            
            if status_filter != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['status'] == status_filter]
            
            if symbol_filter != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['symbol'] == symbol_filter]
            
            if side_filter != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['side'] == side_filter]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            st.dataframe(
                filtered_df[['created_at', 'symbol', 'side', 'quantity', 'price', 'status']],
                use_container_width=True
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ —Å–¥–µ–ª–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            trades_chart = create_trades_chart(filtered_df)
            if trades_chart:
                st.plotly_chart(trades_chart, use_container_width=True)
        else:
            st.info("–°–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    with tab2:
        st.header("üìä –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üî¥ –†–µ–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
            if not real_positions_df.empty:
                st.dataframe(
                    real_positions_df[['symbol', 'side', 'size', 'entry_price', 'pnl']],
                    use_container_width=True
                )
            else:
                st.info("–ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        with col2:
            st.subheader("üü° –¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç")
            if not test_positions_df.empty:
                st.dataframe(
                    test_positions_df[['symbol', 'side', 'size', 'entry_price', 'pnl']],
                    use_container_width=True
                )
            else:
                st.info("–ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
        if not real_positions_df.empty or not test_positions_df.empty:
            st.subheader("üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π")
            comparison_chart = create_positions_comparison_chart(real_positions_df, test_positions_df)
            if comparison_chart:
                st.plotly_chart(comparison_chart, use_container_width=True)
    
    with tab3:
        st.header("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # PnL –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            if not real_positions_df.empty:
                st.subheader("üí∞ PnL - –†–µ–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
                pnl_chart_real = create_pnl_chart(real_positions_df)
                if pnl_chart_real:
                    st.plotly_chart(pnl_chart_real, use_container_width=True)
        
        with col2:
            # PnL –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            if not test_positions_df.empty:
                st.subheader("üí∞ PnL - –¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç")
                pnl_chart_test = create_pnl_chart(test_positions_df)
                if pnl_chart_test:
                    st.plotly_chart(pnl_chart_test, use_container_width=True)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        if not trades_df.empty:
            st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –ø–æ —Å–∏–º–≤–æ–ª–∞–º")
            symbol_counts = trades_df['symbol'].value_counts().head(10)
            
            fig_pie = px.pie(
                values=symbol_counts.values,
                names=symbol_counts.index,
                title="–¢–æ–ø-10 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–¥–µ–ª–æ–∫"
            )
            st.plotly_chart(fig_pie, use_container_width=True)
    
    with tab4:
        st.header("‚öôÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if os.path.exists("data/trading.db"):
            st.success("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            if not trades_df.empty:
                last_trade = trades_df.iloc[0]['created_at']
                st.info(f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {last_trade}")
            
            if not real_positions_df.empty:
                last_update_real = real_positions_df['updated_at'].max()
                st.info(f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π (—Ä–µ–∞–ª—å–Ω—ã–π): {last_update_real}")
            
            if not test_positions_df.empty:
                last_update_test = test_positions_df['updated_at'].max()
                st.info(f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π (—Ç–µ—Å—Ç–æ–≤—ã–π): {last_update_test}")
        else:
            st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É
        st.subheader("üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º")
        
        st.code("""
# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
python src/background_service.py

# –ó–∞–ø—É—Å–∫ dashboard
streamlit run src/dashboard_app.py

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
Ctrl+C –∏–ª–∏ kill –ø—Ä–æ—Ü–µ—Å—Å
        """)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
        st.subheader("üìÅ –§–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã")
        
        files_status = []
        files_to_check = [
            "src/background_service.py",
            "src/dashboard_app.py", 
            "data/trading.db",
            "logs/background_service.log",
            ".env"
        ]
        
        for file_path in files_to_check:
            exists = os.path.exists(file_path)
            size = os.path.getsize(file_path) if exists else 0
            files_status.append({
                '–§–∞–π–ª': file_path,
                '–°—Ç–∞—Ç—É—Å': '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' if exists else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                '–†–∞–∑–º–µ—Ä': f"{size} –±–∞–π—Ç" if exists else "N/A"
            })
        
        st.dataframe(pd.DataFrame(files_status), use_container_width=True)
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown(
        "ü§ñ **Binance Trade Copier Dashboard** | "
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )

if __name__ == "__main__":
    main()

