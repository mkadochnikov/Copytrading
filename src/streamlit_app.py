"""
Streamlit –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–¥–µ–ª–æ–∫
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import sqlite3
import os
import sys
import threading
import time
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__)))

from trade_monitor import BinanceTradeMonitor, BinanceTradeCopier, TradeDatabase
from main import TradeCopierService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Binance Trade Copier",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
if 'service' not in st.session_state:
    st.session_state.service = None
if 'service_thread' not in st.session_state:
    st.session_state.service_thread = None
if 'service_running' not in st.session_state:
    st.session_state.service_running = False

class StreamlitTradeCopierService(TradeCopierService):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Streamlit"""
    
    def __init__(self):
        # –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è Streamlit
        super().__init__(setup_signals=False)
        self.status_placeholder = None
    
    def start_background(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        def run():
            self.start()
        
        thread = threading.Thread(target=run, daemon=True)
        thread.start()
        return thread

def load_trades_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = TradeDatabase()
    
    try:
        with sqlite3.connect(db.db_path) as conn:
            query = """
                SELECT trade_id, symbol, side, quantity, price, timestamp, copied, created_at
                FROM processed_trades
                ORDER BY timestamp DESC
                LIMIT 1000
            """
            df = pd.read_sql_query(query, conn)
            
            if not df.empty:
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ timestamp –≤ datetime
                df['datetime'] = pd.to_datetime(df['timestamp'], unit='ms')
                df['created_at'] = pd.to_datetime(df['created_at'])
                
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
                df['value'] = df['quantity'] * df['price']
                
            return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def get_service_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    if st.session_state.service:
        return st.session_state.service.get_stats()
    return {}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üìà Binance Futures Trade Copier")
    st.markdown("---")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    with st.sidebar:
        st.header("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
        if st.session_state.service_running:
            st.success("üü¢ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
            if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å", type="secondary"):
                if st.session_state.service:
                    st.session_state.service.stop()
                st.session_state.service_running = False
                st.session_state.service = None
                st.rerun()
        else:
            st.error("üî¥ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å", type="primary"):
                try:
                    service = StreamlitTradeCopierService()
                    st.session_state.service = service
                    st.session_state.service_thread = service.start_background()
                    st.session_state.service_running = True
                    st.success("–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω!")
                    st.rerun()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        
        st.markdown("---")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        polling_interval = st.slider(
            "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ (—Å–µ–∫)",
            min_value=5,
            max_value=60,
            value=10,
            step=5
        )
        
        auto_refresh = st.checkbox("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=True)
        
        if auto_refresh:
            refresh_interval = st.slider(
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫)",
                min_value=5,
                max_value=30,
                value=10,
                step=5
            )
        
        st.markdown("---")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        st.header("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        if st.button("–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"):
            with st.spinner("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."):
                try:
                    monitor = BinanceTradeMonitor()
                    copier = BinanceTradeCopier()
                    
                    monitor_ok = monitor.test_connection()
                    copier_ok = copier.test_connection()
                    
                    if monitor_ok and copier_ok:
                        st.success("‚úÖ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    col1, col2, col3, col4 = st.columns(4)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = get_service_stats()
    
    with col1:
        st.metric(
            "–ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫",
            stats.get('total_trades_found', 0),
            delta=None
        )
    
    with col2:
        st.metric(
            "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Å–¥–µ–ª–æ–∫",
            stats.get('total_trades_copied', 0),
            delta=None
        )
    
    with col3:
        st.metric(
            "–û—à–∏–±–∫–∏",
            stats.get('errors', 0),
            delta=None
        )
    
    with col4:
        if stats.get('last_check'):
            last_check = stats['last_check']
            if isinstance(last_check, str):
                last_check = datetime.fromisoformat(last_check.replace('Z', '+00:00'))
            st.metric(
                "–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
                last_check.strftime("%H:%M:%S") if last_check else "–ù–∏–∫–æ–≥–¥–∞",
                delta=None
            )
        else:
            st.metric("–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞", "–ù–∏–∫–æ–≥–¥–∞", delta=None)
    
    st.markdown("---")
    
    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs(["üìä –û–±–∑–æ—Ä", "üìã –°–¥–µ–ª–∫–∏", "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üìù –õ–æ–≥–∏"])
    
    with tab1:
        st.header("–û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = load_trades_data()
        
        if not df.empty:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            st.subheader("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏")
            recent_trades = df.head(10)
            
            for _, trade in recent_trades.iterrows():
                col1, col2, col3, col4, col5 = st.columns([2, 1, 1, 1, 1])
                
                with col1:
                    st.write(f"**{trade['symbol']}**")
                
                with col2:
                    color = "üü¢" if trade['side'] == 'BUY' else "üî¥"
                    st.write(f"{color} {trade['side']}")
                
                with col3:
                    st.write(f"{trade['quantity']:.4f}")
                
                with col4:
                    st.write(f"${trade['price']:.2f}")
                
                with col5:
                    status = "‚úÖ" if trade['copied'] else "‚è≥"
                    st.write(status)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º")
            
            symbol_stats = df.groupby('symbol').agg({
                'trade_id': 'count',
                'value': 'sum',
                'copied': 'sum'
            }).round(2)
            symbol_stats.columns = ['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫', '–û–±—â–∏–π –æ–±—ä–µ–º', '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ']
            
            st.dataframe(symbol_stats, use_container_width=True)
            
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    with tab2:
        st.header("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫")
        
        df = load_trades_data()
        
        if not df.empty:
            # –§–∏–ª—å—Ç—Ä—ã
            col1, col2, col3 = st.columns(3)
            
            with col1:
                symbols = ['–í—Å–µ'] + list(df['symbol'].unique())
                selected_symbol = st.selectbox("–°–∏–º–≤–æ–ª", symbols)
            
            with col2:
                sides = ['–í—Å–µ', 'BUY', 'SELL']
                selected_side = st.selectbox("–°—Ç–æ—Ä–æ–Ω–∞", sides)
            
            with col3:
                statuses = ['–í—Å–µ', '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', '–ù–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ']
                selected_status = st.selectbox("–°—Ç–∞—Ç—É—Å", statuses)
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filtered_df = df.copy()
            
            if selected_symbol != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['symbol'] == selected_symbol]
            
            if selected_side != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['side'] == selected_side]
            
            if selected_status == '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ':
                filtered_df = filtered_df[filtered_df['copied'] == True]
            elif selected_status == '–ù–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ':
                filtered_df = filtered_df[filtered_df['copied'] == False]
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            display_df = filtered_df[['datetime', 'symbol', 'side', 'quantity', 'price', 'value', 'copied']].copy()
            display_df['copied'] = display_df['copied'].map({True: '‚úÖ', False: '‚è≥'})
            
            st.dataframe(
                display_df,
                use_container_width=True,
                column_config={
                    "datetime": st.column_config.DatetimeColumn("–í—Ä–µ–º—è"),
                    "symbol": st.column_config.TextColumn("–°–∏–º–≤–æ–ª"),
                    "side": st.column_config.TextColumn("–°—Ç–æ—Ä–æ–Ω–∞"),
                    "quantity": st.column_config.NumberColumn("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", format="%.4f"),
                    "price": st.column_config.NumberColumn("–¶–µ–Ω–∞", format="$%.2f"),
                    "value": st.column_config.NumberColumn("–û–±—ä–µ–º", format="$%.2f"),
                    "copied": st.column_config.TextColumn("–°—Ç–∞—Ç—É—Å")
                }
            )
            
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    with tab3:
        st.header("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        df = load_trades_data()
        
        if not df.empty:
            # –ì—Ä–∞—Ñ–∏–∫ –æ–±—ä–µ–º–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            st.subheader("üìà –û–±—ä–µ–º—ã —Å–¥–µ–ª–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å–∞–º
            df['hour'] = df['datetime'].dt.floor('H')
            hourly_volume = df.groupby('hour')['value'].sum().reset_index()
            
            fig_volume = px.line(
                hourly_volume,
                x='hour',
                y='value',
                title='–û–±—ä–µ–º —Å–¥–µ–ª–æ–∫ –ø–æ —á–∞—Å–∞–º',
                labels={'hour': '–í—Ä–µ–º—è', 'value': '–û–±—ä–µ–º ($)'}
            )
            st.plotly_chart(fig_volume, use_container_width=True)
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            st.subheader("ü•ß –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º")
            
            symbol_volume = df.groupby('symbol')['value'].sum().reset_index()
            
            fig_pie = px.pie(
                symbol_volume,
                values='value',
                names='symbol',
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º'
            )
            st.plotly_chart(fig_pie, use_container_width=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ BUY/SELL
            st.subheader("‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ BUY/SELL")
            
            side_stats = df.groupby('side').agg({
                'trade_id': 'count',
                'value': 'sum'
            }).reset_index()
            
            col1, col2 = st.columns(2)
            
            with col1:
                fig_count = px.bar(
                    side_stats,
                    x='side',
                    y='trade_id',
                    title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫',
                    color='side',
                    color_discrete_map={'BUY': 'green', 'SELL': 'red'}
                )
                st.plotly_chart(fig_count, use_container_width=True)
            
            with col2:
                fig_value = px.bar(
                    side_stats,
                    x='side',
                    y='value',
                    title='–û–±—ä–µ–º —Å–¥–µ–ª–æ–∫',
                    color='side',
                    color_discrete_map={'BUY': 'green', 'SELL': 'red'}
                )
                st.plotly_chart(fig_value, use_container_width=True)
            
        else:
            st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    
    with tab4:
        st.header("–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏")
        
        # –ß—Ç–µ–Ω–∏–µ –ª–æ–≥–æ–≤
        log_file = "logs/trade_copier.log"
        
        if os.path.exists(log_file):
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    logs = f.readlines()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
                recent_logs = logs[-100:] if len(logs) > 100 else logs
                
                # –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é –ª–æ–≥–æ–≤
                log_level = st.selectbox(
                    "–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤",
                    ["–í—Å–µ", "ERROR", "WARNING", "INFO", "DEBUG"]
                )
                
                filtered_logs = []
                for log in recent_logs:
                    if log_level == "–í—Å–µ" or log_level in log:
                        filtered_logs.append(log)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤
                log_text = "".join(filtered_logs)
                st.text_area(
                    "–õ–æ–≥–∏",
                    value=log_text,
                    height=400,
                    disabled=True
                )
                
                # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
                if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"):
                    try:
                        open(log_file, 'w').close()
                        st.success("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
                        
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        else:
            st.info("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if auto_refresh and st.session_state.service_running:
        time.sleep(refresh_interval)
        st.rerun()

if __name__ == "__main__":
    main()

